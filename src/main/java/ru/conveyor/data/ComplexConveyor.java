package ru.conveyor.data;

import java.util.List;

// todo: реализовать (как того требует задание) другой вариант работы конвеера
//  проблема с уже реализованным конвееров в том, что он использует LinkedList
//  у LinkedList O(1) вставка и удаление. То есть запись в голову и удаление из хвоста происходит за 2 операции
//  но вот поиск и замена значений по точкам пересечения O(n) * на количество пересечений.
//  Доступа по индексу у LinkedList же нет. Поэтому это очень медленная реализация,
//  если точек много и они в конце совсем неэффективно.
//  у ArrayList быстрый поиск по индексу, но вставка в начало очень медленная,
//  идёт проход по всей коллекции гарантированно. Но даже он возможно будет быстрее LinkedList..

// todo: Здесь нужно воспользовать другой структурой данных (не LinkedList, не ArrayList),
//  более оптимальной с точки зрения поиска элементов по индексу и быстрой вставкой в голову и в хвост.
public class ComplexConveyor implements Conveyor {

    // todo: реализовать
    @Override
    public int pushValue(int value) {
        return 0;
    }

    //todo: реализовать
    @Override
    public List<Integer> getStatus() {
        return null;
    }
}
